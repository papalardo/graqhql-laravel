
type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    email_verified_at: DateTime
    tenants: [Tenant!]! @hasMany
}

input TypeSearchString {
    equal: String @eq
}
input UserSearch {
    name: String @eq
    # email: TypeSearchString
}

extend type Query @middleware(checks: ["auth:api"]) {
    me: User! @auth(guard: "api")
    users(
        orderBy: [OrderByClause!] @orderBy
        search: UserSearch @spread
    ): [User!]! @paginate(type: "paginator" model: "App\\User")
    user(id: ID @eq): User @find(model: "App\\User")
}

extend type Mutation {
    createUser(
        name: String @rules(apply: ["required"])
        email: String @rules(apply: ["required", "email", "unique:users,email"])
        password: String @rules(apply: ["required", "min:6", "confirmed"])
        password_confirmation: String @rules(apply: ["required"])
    ) : User @create(model: "App\\User")

    updateUser(
        id: ID @rules(apply: ["required"])
        name: String
        email: String @rules(apply: ["email"])
        password: String @rules(apply: ["min:6", "confirmed"])
        password_confirmation: String
    ) :  User @update(model: "App\\User")

    deleteUser(
        id: ID! @rules(apply: ["required"])
    ) : User @delete(model: "App\\User")
}